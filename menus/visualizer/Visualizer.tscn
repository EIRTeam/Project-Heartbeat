[gd_scene load_steps=5 format=3 uid="uid://b3peah64ej2iw"]

[ext_resource type="Script" path="res://menus/visualizer/Visualizer.gd" id="1"]

[sub_resource type="Shader" id="1"]
code = "// credit: https://www.shadertoy.com/view/4tGXzt
shader_type canvas_item;

uniform float FREQ_RANGE = 16.0;
const float RADIUS = 0.6;
const float BRIGHTNESS = 0.2;
const float SPEED = 0.2;
uniform vec2 size;
uniform sampler2D audio : hint_default_white;

//convert HSV to RGB
vec3 hsv2rgb(vec3 c){
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float luma(vec3 color) {
  return dot(color, vec3(0.299, 0.587, 0.114));
}

float getfrequency(float x) {
	return texture(audio, vec2(floor(x * FREQ_RANGE) / FREQ_RANGE, 0.0)).x + 0.06;
}

float getfrequency_smooth(float x) {
	float index = floor(x * FREQ_RANGE) / FREQ_RANGE;
    float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;
	return mix(getfrequency(index), getfrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));
}

float getfrequency_blend(float x) {
    return mix(getfrequency(x), getfrequency_smooth(x), 0.5);
}

vec3 doHalo(vec2 fragment, float radius, float t) {
	float dist = length(fragment);
	float ring = 1.0 / (abs(dist - radius) + 0.005);
	
	float b = dist < radius ? BRIGHTNESS * 0.6 : BRIGHTNESS;
	
	vec3 col = vec3(0.0);
	
	float angle = atan(fragment.x, fragment.y);
	col += hsv2rgb( vec3( ( angle + t * 0.25 ) / (PI * 2.0), 0.6, 0.5 ) ) * ring * b;
	
	float frequency = max(getfrequency_smooth(abs(angle / PI)) - 0.02, 0.0);
	col *= frequency * 0.5;
	
	// Black halo
	//col *= smoothstep(radius * 0.86, radius, dist);
	
	return col;
}

vec3 doLine(vec2 fragment, float radius, float x, float t) {
	vec3 col = hsv2rgb(vec3(x * 0.23 + t * 0.12, 1.0, 1.0));
	
	float freq = abs(fragment.x * 0.5);
	
	col *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getfrequency(freq);	
	col = col * smoothstep(radius, radius * 1.8, abs(fragment.x));
	
	return col;
}


void fragment() {
	//vec2 iResolution = 1.0 / SCREEN_PIXEL_SIZE;
	vec2 iResolution = size;
	
    vec2 fragPos = UV;
	fragPos = (fragPos - 0.5) * 2.0;
    fragPos.x *= iResolution.x / iResolution.y;
	
	vec3 color = vec3(0.13, 0.07, 0.26);
	color += doHalo(fragPos, RADIUS, TIME);

    float c = cos(TIME * SPEED);
    float s = sin(TIME * SPEED);
    vec2 rot = mat2(vec2(c,s),vec2(-s,c)) * fragPos;
	//color += doLine(rot, RADIUS, rot.x, TIME);
	
	color += max(luma(color) - 1.0, 0.0);
    
	COLOR = vec4(color*0.5, 0.75);
}"

[sub_resource type="ShaderMaterial" id="2"]
shader = SubResource("1")
shader_parameter/FREQ_RANGE = 16.0
shader_parameter/size = Vector2(1920, 1080)

[sub_resource type="StyleBoxFlat" id="3"]
bg_color = Color(0.0745098, 0.0392157, 0.14902, 0.501961)

[node name="Control" type="Panel"]
material = SubResource("2")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
theme_override_styles/panel = SubResource("3")
script = ExtResource("1")
fallback_stylebox = SubResource("3")
