[gd_scene load_steps=16 format=2]

[ext_resource path="res://rythm_game/NoteTarget.tscn" type="PackedScene" id=1]
[ext_resource path="res://rythm_game/Note.tscn" type="PackedScene" id=2]
[ext_resource path="res://rythm_game/SingleNoteDrawer.gd" type="Script" id=3]
[ext_resource path="res://graphics/effects/appear.png" type="Texture" id=4]
[ext_resource path="res://graphics/default_avatar.png" type="Texture" id=5]
[ext_resource path="res://rythm_game/SineDrawer.gd" type="Script" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
const float PI = 3.14159265358979323846264;

uniform vec4 color_start : hint_color;
uniform vec4 color_end : hint_color;
uniform float time;
uniform float thickness;
uniform float frequency;
uniform float amplitude;
uniform float margin;
uniform vec2 size;
uniform bool leading_enabled;
uniform float x_offset;
vec4 get_color(float t) {
	return mix(color_start, color_end, clamp(t, 0.0, 1.0));
}

float udCos( in vec2 p, in float a, in float b, in float c, in float d )
{
    // convert all data to a primitive cosine wave
    p = c*(p-vec2(d,a));
    
    // reduce to principal half cycle
    const float TPI = 6.28318530718;
    p.x = mod( p.x, TPI); if( p.x>(0.5*TPI) ) p.x = TPI - p.x;

    // find zero of derivative (minimize distance)
    float xa = 0.0, xb = TPI;
    for( int i=0; i<4; i++ ) // bisection, 7 bits more or less
    {
        float x = 0.5*(xa+xb);
        float si = sin(x);
        float co = cos(x);
        float y = x-p.x+b*c*si*(p.y-b*c*co);
        if( y<0.0 ) xa = x; else xb = x;
    }
    float x = 0.5*(xa+xb);
    for( int i=0; i<2; i++ ) // newtown-raphson, 28 bits more or less
    {
        float si = sin(x);
        float co = cos(x);
        float  f = x - p.x + b*c*(p.y*si - b*c*si*co);
        float df = 1.0     + b*c*(p.y*co - b*c*(2.0*co*co-1.0));
        x = x - f/df;
    }
    
    // compute distance    
    vec2 q = vec2(x,b*c*cos(x));
    return length(p-q)/c;
}

float get_sine_shape(vec2 point, float t, float freq, float ampl, float phase_shift) {
	float ca = 0.5; // offset    (y position)
    float cb = ampl; // amplitude (y scale)
	
	
	
    float cc = frequency;
    float cd = 0.0; // phase     (x position)
	point.x += x_offset;
	float d = udCos( point, ca, cb, cc, phase_shift);
	float lineAShape = smoothstep(1.0 - clamp(d, 0.0, 1.0), 1.0, 1.0 - thickness);
	return lineAShape;
}

void fragment() {
	float t = 0.5 + time / 2.0;
	float scaled_margin = (margin * (880.0/(size.x)));
	if (UV.x <= t - scaled_margin) {
		if (leading_enabled) {
			float lineAShape = get_sine_shape(UV, time, frequency, amplitude, 0.0);
			
			vec4 c = color_start;
			c.a = 0.5 * (1.0 - time);
			COLOR = (1.0 - lineAShape) * c;
			if (UV.x < 0.5) {
				discard;
			}
		} else {
			discard;
		}
	} 
	if (UV.x >= t) {
		float lineAShape = get_sine_shape(UV, time, frequency, amplitude*1.2, 0.0);
		float lineBShape = get_sine_shape(UV, time, frequency, amplitude*0.8, 0.0);
		
		float color_x = clamp((UV.x - 0.5) / 0.5, 0.0, 1.0);
		vec4 col = get_color(color_x);
		vec4 lineACol = (1.0 - lineAShape) * col;
		vec4 lineBCol = (1.0 - lineBShape) * col;
		
		COLOR = lineACol;
		COLOR += lineBCol * (1.0 - COLOR.a);
	}
	if (UV.x >= t - scaled_margin && UV.x <= t + scaled_margin) {
		discard;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/color_start = Color( 1, 0, 0, 1 )
shader_param/color_end = Color( 0, 0, 1, 1 )
shader_param/time = 0.733
shader_param/thickness = 0.003
shader_param/frequency = 5.0
shader_param/amplitude = 1000.0
shader_param/margin = 0.05
shader_param/size = Vector2( 880, 0 )
shader_param/leading_enabled = true
shader_param/x_offset = null

[sub_resource type="ArrayMesh" id=3]
resource_local_to_scene = true
surfaces/0 = {
"aabb": AABB( -128, -128, 0, 256, 256, 0 ),
"array_data": PoolByteArray( 0, 0, 0, 67, 0, 0, 0, 67, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 195, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 195, 0, 0, 0, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 195, 0, 0, 128, 63, 0, 0, 0, 0 ),
"array_index_data": PoolByteArray( 3, 0, 0, 0, 1, 0, 1, 0, 2, 0, 3, 0 ),
"blend_shape_data": [  ],
"format": 262417,
"index_count": 6,
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 4
}

[sub_resource type="Gradient" id=4]
offsets = PoolRealArray( 0, 0.941077, 1 )
colors = PoolColorArray( 0.00392157, 0.00392157, 0.00392157, 0.415686, 1, 1, 1, 0.42, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=5]
gradient = SubResource( 4 )

[sub_resource type="Curve" id=6]
max_value = 6.0
_data = [ Vector2( 0, 3.592 ), 0.0, 0.0, 0, 0, Vector2( 1, 6 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=7]
curve = SubResource( 6 )

[sub_resource type="ParticlesMaterial" id=8]
flag_disable_z = true
gravity = Vector3( 0, 0, 0 )
angular_velocity = 50.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 0.1
scale_curve = SubResource( 7 )
color_ramp = SubResource( 5 )

[sub_resource type="Animation" id=9]
length = 0.34
step = 0.17
tracks/0/type = "value"
tracks/0/path = NodePath(".:target_scale_modifier")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.17, 0.34 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.1, 1.0 ]
}

[node name="SingleNoteDrawer" type="Node2D"]
script = ExtResource( 3 )

[node name="SineDrawer" type="MeshInstance2D" parent="."]
material = SubResource( 2 )
z_index = -1
mesh = SubResource( 3 )
texture = ExtResource( 5 )
script = ExtResource( 6 )

[node name="NoteTarget" parent="." instance=ExtResource( 1 )]
z_index = -1
z_as_relative = false

[node name="Particles2D" type="Particles2D" parent="NoteTarget"]
position = Vector2( -2.21606, -1.10802 )
emitting = false
amount = 1
one_shot = true
speed_scale = 4.0
process_material = SubResource( 8 )
texture = ExtResource( 4 )

[node name="RemoteTransform2D" type="RemoteTransform2D" parent="NoteTarget"]
remote_path = NodePath("../../SineDrawer")
update_rotation = false
update_scale = false

[node name="Note" parent="." instance=ExtResource( 2 )]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/note_appear = SubResource( 9 )
