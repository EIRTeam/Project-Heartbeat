[gd_scene load_steps=3 format=2]

[ext_resource path="res://fonts/Tools_Font.tres" type="DynamicFont" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

enum AFTButtons {
	TRIANGLE = 0x0,
	CIRCLE = 0x1,
	CROSS = 0x2,
	SQUARE = 0x3,
	TRIANGLE_HOLD = 0x4,
	CIRCLE_HOLD = 0x5,
	CROSS_HOLD = 0x6,
	SQUARE_HOLD = 0x7,
	SLIDE_L = 0x0C,
	SLIDE_R = 0x0D,
	CHAIN_L = 0x0F,
	CHAIN_R = 0x10
}

var AFT2PHButtonMap = {
	AFTButtons.TRIANGLE: HBBaseNote.NOTE_TYPE.UP,
	AFTButtons.CIRCLE: HBBaseNote.NOTE_TYPE.RIGHT,
	AFTButtons.CROSS: HBBaseNote.NOTE_TYPE.DOWN,
	AFTButtons.SQUARE: HBBaseNote.NOTE_TYPE.LEFT,
	AFTButtons.TRIANGLE_HOLD: HBBaseNote.NOTE_TYPE.UP,
	AFTButtons.CIRCLE_HOLD: HBBaseNote.NOTE_TYPE.RIGHT,
	AFTButtons.CROSS_HOLD: HBBaseNote.NOTE_TYPE.DOWN,
	AFTButtons.SQUARE_HOLD: HBBaseNote.NOTE_TYPE.LEFT,
	AFTButtons.SLIDE_L: HBBaseNote.NOTE_TYPE.SLIDE_LEFT,
	AFTButtons.SLIDE_R: HBBaseNote.NOTE_TYPE.SLIDE_RIGHT,
	AFTButtons.CHAIN_L: HBBaseNote.NOTE_TYPE.SLIDE_LEFT_HOLD_PIECE,
	AFTButtons.CHAIN_R: HBBaseNote.NOTE_TYPE.SLIDE_RIGHT_HOLD_PIECE,
}

func is_hold(button: int):
	return button > 3 and button < 8



func test_pvdb_loading():
	var AFT_LOCATION = \"/home/eirexe/Descargas/PDAFT/SBZV_7.01\"
	var PVDB_LOCATION = HBUtils.join_path(AFT_LOCATION, \"rom/pv_db.txt\")
	var file = File.new()
	file.open(PVDB_LOCATION, File.READ)
	var found_pv_ids = []
	var pv_data = {}
	while not file.eof_reached():

		var line = file.get_line()
		if not line.strip_edges() or line.begins_with(\"#\"):
			continue
		var spl = line.split(\"=\")
		var key = spl[0]
		var value = spl[1]
		if line.begins_with(\"pv_\"):
			var pv_id = int(line.substr(3, 3))
			if not pv_id in found_pv_ids:
				found_pv_ids.append(pv_id)
				pv_data[pv_id] = {\"charts\": {}, \"title\": \"\", \"song_file_name\": \"\"}
			if key.ends_with(\"script_file_name\"):
				var difficulty = key.split(\".\")[2]
				pv_data[pv_id].charts[difficulty] = value
			if key.ends_with(\"song_file_name\"):
				pv_data[pv_id].song_file_name = value
			if key.ends_with(\"song_name\"):
				print(\"SONG NAME\")
				pv_data[pv_id].title = value
	var pvs_str = \"\"
	for pv_id in pv_data:
		var pv_info = pv_data[pv_id]
		var pv_str = \"\"\"PVID: %d
PV_TITLE: %s
PV_OGG: %s
\"\"\" % [pv_id, pv_info.title, pv_info.song_file_name]
		var difficulties_str = \"\"
		for difficulty in pv_info.charts:
			difficulties_str += \"Difficulty %s: %s\\n\" % [difficulty, pv_info.charts[difficulty]]
		pv_str += difficulties_str
		pvs_str += pv_str + \"\\n\"
	var rtl: RichTextLabel = $RichTextLabel
	rtl.text = pvs_str

func _ready():
	MouseTrap.disable_mouse_trap()
	test_pvdb_loading()
	return
	var r = DSCConverter.convert_file(\"user://pv.dsc\")
	var rtl: RichTextLabel = $RichTextLabel
	var curr_time = 0.0
	var current_BPM = 0.0
	var target_flying_time = 0.0
	var most_recent_timeout_source = \"BPM\"
	var chart = HBChart.new()
	var curr_chain_starter = null
	for opcode in r:
		var string = HBUtils.find_key(DSCOpcodeMap.AFT_OPCODES, opcode.opcode)
		rtl.text += string
		for param in opcode.params:
			rtl.text += \" \" + str(param)
		if opcode.opcode == DSCOpcodeMap.AFT_OPCODES.TIME:
			curr_time = float(opcode.params[0])
		if opcode.opcode == DSCOpcodeMap.AFT_OPCODES.BAR_TIME_SET:
			current_BPM = float(opcode.params[0])
			most_recent_timeout_source = \"BPM\"
		if opcode.opcode == DSCOpcodeMap.AFT_OPCODES.TARGET_FLYING_TIME:
			target_flying_time = int(opcode.params[0])
			most_recent_timeout_source = \"TFT\"
		if opcode.opcode == DSCOpcodeMap.AFT_OPCODES.TARGET:
			if opcode.params[0] in AFTButtons.values():
				
				rtl.text += \" \" + HBUtils.find_key(AFTButtons, opcode.params[0] - 3)
				var note_d := HBNoteData.new()
				note_d.position = Vector2(opcode.params[1] / 250.0, opcode.params[2] / 250.0)
				note_d.time = int(curr_time / 100.0) + target_flying_time
				
				if opcode.params[0] in [AFTButtons.CHAIN_L, AFTButtons.CHAIN_R] and curr_chain_starter:
					if opcode.params[0] == AFTButtons.CHAIN_L:
						if curr_chain_starter.note_type != HBBaseNote.NOTE_TYPE.SLIDE_LEFT:
							curr_chain_starter = null
					else:
						if curr_chain_starter.note_type != HBBaseNote.NOTE_TYPE.SLIDE_RIGHT:
							curr_chain_starter = null
				else:
					curr_chain_starter = null
					
				if not curr_chain_starter and opcode.params[0] in [AFTButtons.CHAIN_L, AFTButtons.CHAIN_R]:
					if opcode.params[0] == AFTButtons.CHAIN_L:
						note_d.position.x -= 20
						note_d.note_type = HBBaseNote.NOTE_TYPE.SLIDE_LEFT
					else:
						note_d.position.x += 20
						note_d.note_type = HBBaseNote.NOTE_TYPE.SLIDE_RIGHT
					curr_chain_starter = note_d
				else:
					var note_type = int(AFT2PHButtonMap[opcode.params[0]])
					note_d.note_type = note_type
				note_d.hold = is_hold(opcode.params[0])
				note_d.entry_angle = (opcode.params[3] / 1000.0) - 90.0
				note_d.oscillation_frequency = opcode.params[6]
				note_d.oscillation_amplitude = opcode.params[5]
				note_d.distance = opcode.params[4] / 250.0
				if most_recent_timeout_source == \"BPM\":
					note_d.time_out = int((60.0  / current_BPM * (1 + 3) * 1000.0))
				else:
					note_d.time_out = target_flying_time
					
					
				note_d.auto_time_out = false
				var search_type = note_d.note_type
				if note_d.is_slide_hold_piece():
					if note_d.note_type == HBBaseNote.NOTE_TYPE.SLIDE_LEFT_HOLD_PIECE:
						search_type = HBBaseNote.NOTE_TYPE.SLIDE_LEFT
					else:
						search_type = HBBaseNote.NOTE_TYPE.SLIDE_RIGHT
				chart.layers[chart.get_layer_i(HBUtils.find_key(HBNoteData.NOTE_TYPE, search_type))].timing_points.append(note_d)
		if opcode.opcode == DSCOpcodeMap.AFT_OPCODES.BAR_TIME_SET:
			rtl.text += \"\\n\"
	var d = chart.serialize()
	var f = File.new()
	f.open(\"user:///songs/test_chart/extreme.json\", File.WRITE)
	f.store_string(JSON.print(d, \"  \"))
	f.close()
"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RichTextLabel" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_fonts/normal_font = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}
